name: 'Test Local Build'

on:
  workflow_dispatch:

jobs:
  test-translate:
    runs-on: ubuntu-latest
    outputs:
      translated: ${{ steps.check-translation.outputs.translated }}
    
    steps:
      - name: Checkout Modrinth source repository
        uses: actions/checkout@v4
        with:
          repository: modrinth/code
          path: .
          submodules: recursive
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          package_json_file: 'package.json'
          run_install: false
          
      - name: Check SQLx cache files before upload
        run: |
          echo "🔍 Checking for SQLx cache files in current directory..."
          echo "📁 Current directory: $(pwd)"
          echo "📁 Looking for packages directory:"
          find . -name "packages" -type d
          echo "📁 Looking for app-lib directory:"
          find . -name "app-lib" -type d
          echo "🗂️ Looking for .sqlx directories:"
          find . -name ".sqlx" -type d
          find . -name "sqlx-data.json" -type f
          echo "📄 SQLx cache files:"
          find . -path "*/.sqlx/*" -type f | head -10
          
      - name: Check translation completion
        id: check-translation
        run: |
          echo "translated=true" >> $GITHUB_OUTPUT
          
      - name: Upload translated source code
        uses: actions/upload-artifact@v4
        with:
          name: translated-source
          path: .
          retention-days: 1

  test-build:
    needs: test-translate
    if: needs.test-translate.outputs.translated == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Download translated source
        uses: actions/download-artifact@v4
        with:
          name: translated-source
          path: .
          
      - name: Check directory structure after download
        run: |
          echo "🔍 Checking directory structure in build phase..."
          echo "📁 Current directory: $(pwd)"
          echo "📁 Top-level contents:"
          ls -la
          echo "📁 Looking for packages directory:"
          find . -name "packages" -type d
          echo "📁 Looking for app-lib directory:"
          find . -name "app-lib" -type d
          echo "🗂️ Looking for .sqlx directories:"
          find . -name ".sqlx" -type d
          echo "📄 SQLx cache files:"
          find . -path "*/.sqlx/*" -type f | head -10
          
          echo "📁 SQLx cache status:"
          SQLX_PATH="./packages/app-lib/.sqlx"
          if [ -d "$SQLX_PATH" ]; then
            echo "✅ SQLx cache found at: $SQLX_PATH"
            echo "📄 SQLx cache files count: $(find $SQLX_PATH -name "*.json" | wc -l)"
            ls -la "$SQLX_PATH" | head -5
          else
            echo "❌ SQLx cache not found at: $SQLX_PATH"
          fi
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        
      - name: Find app directory
        id: find-app-dir
        run: |
          FOUND_DIR=""
          while IFS= read -r -d '' pkg_file; do
            echo "📄 Checking: $pkg_file"
            dir=$(dirname "$pkg_file")
            
            if grep -q "@tauri-apps\|tauri.*build" "$pkg_file" 2>/dev/null; then
              echo "✅ Found Tauri project in: $dir"
              if [ -d "$dir/src-tauri" ]; then
                echo "✅ Confirmed: src-tauri directory exists"
                FOUND_DIR="$dir"
                break
              fi
            fi
          done < <(find . -name "package.json" -type f -print0)
          
          if [ -z "$FOUND_DIR" ]; then
            for pattern in "*/apps/*" "*/app" "apps/*" "app" "*frontend*" "frontend"; do
              for dir in $pattern; do
                if [ -d "$dir" ] && [ -f "$dir/package.json" ]; then
                  echo "✅ Found app directory: $dir"
                  FOUND_DIR="$dir"
                  break 2
                fi
              done
            done
          fi
          
          if [ -z "$FOUND_DIR" ]; then
            echo "❌ Could not find any suitable app directory"
            exit 1
          fi
          
          echo "app-dir=$FOUND_DIR" >> $GITHUB_OUTPUT
          echo "✅ Selected app directory: $FOUND_DIR"
          
      - name: Install Node dependencies
        run: |
          cd "${{ steps.find-app-dir.outputs.app-dir }}"
          pnpm install
          
      - name: Build application
        run: |
          echo "🏗️ Building for Linux..."
          cd "${{ steps.find-app-dir.outputs.app-dir }}"
          echo "🚀 Running: pnpm build"
          pnpm build