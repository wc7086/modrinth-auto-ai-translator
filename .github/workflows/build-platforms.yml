name: 'Multi-Platform Build'

on:
  repository_dispatch:
    types: [build-platforms]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ github.event.client_payload.run_id }}
      release_tag: ${{ github.event.client_payload.release_tag }}
      target_language: ${{ github.event.client_payload.target_language }}
      openai_model: ${{ github.event.client_payload.openai_model }}
    steps:
      - name: Output build parameters
        run: |
          echo "🎯 Build Parameters:"
          echo "  Run ID: ${{ github.event.client_payload.run_id }}"
          echo "  Release Tag: ${{ github.event.client_payload.release_tag }}"
          echo "  Target Language: ${{ github.event.client_payload.target_language }}"
          echo "  OpenAI Model: ${{ github.event.client_payload.openai_model }}"

  build-linux:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Download translated source
        uses: actions/download-artifact@v4
        with:
          name: translated-source-${{ needs.prepare.outputs.run_id }}
          path: .
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
          
      - name: Install dependencies
        run: |
          cd modrinth-source/apps/app
          pnpm install
          
      - name: Build for Linux
        run: |
          echo "🏗️ Building for Linux x64..."
          cd modrinth-source/apps/app
          pnpm run tauri build
          
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-build-${{ needs.prepare.outputs.run_id }}
          path: |
            modrinth-source/apps/app/src-tauri/target/release/bundle/
          retention-days: 7

  build-windows:
    needs: prepare
    runs-on: windows-latest
    steps:
      - name: Download translated source
        uses: actions/download-artifact@v4
        with:
          name: translated-source-${{ needs.prepare.outputs.run_id }}
          path: .
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install dependencies
        run: |
          cd modrinth-source/apps/app
          pnpm install
          
      - name: Build for Windows
        run: |
          echo "🏗️ Building for Windows x64..."
          cd modrinth-source/apps/app
          pnpm run tauri build
          
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-${{ needs.prepare.outputs.run_id }}
          path: |
            modrinth-source/apps/app/src-tauri/target/release/bundle/
          retention-days: 7

  build-macos:
    needs: prepare
    runs-on: macos-latest
    steps:
      - name: Download translated source
        uses: actions/download-artifact@v4
        with:
          name: translated-source-${{ needs.prepare.outputs.run_id }}
          path: .
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin,aarch64-apple-darwin
          
      - name: Install dependencies
        run: |
          cd modrinth-source/apps/app
          pnpm install
          
      - name: Build for macOS (Intel)
        run: |
          echo "🏗️ Building for macOS x64..."
          cd modrinth-source/apps/app
          pnpm run tauri build --target x86_64-apple-darwin
          
      - name: Build for macOS (Apple Silicon)
        run: |
          echo "🏗️ Building for macOS ARM64..."
          cd modrinth-source/apps/app
          pnpm run tauri build --target aarch64-apple-darwin
          
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-${{ needs.prepare.outputs.run_id }}
          path: |
            modrinth-source/apps/app/src-tauri/target/x86_64-apple-darwin/release/bundle/
            modrinth-source/apps/app/src-tauri/target/aarch64-apple-darwin/release/bundle/
          retention-days: 7

  create-release:
    needs: [prepare, build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: always() && (needs.build-linux.result == 'success' || needs.build-windows.result == 'success' || needs.build-macos.result == 'success')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-build-${{ needs.prepare.outputs.run_id }}"
          path: build-artifacts/
          merge-multiple: true
          
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ needs.prepare.outputs.release_tag }}
          TARGET_LANGUAGE: ${{ needs.prepare.outputs.target_language }}
        run: |
          echo "🚀 Creating multi-platform release..."
          
          # Determine final release tag
          FINAL_TAG="${RELEASE_TAG}-$(echo '$TARGET_LANGUAGE' | tr '[:upper:]' '[:lower:]' | sed 's/简体中文/zh-cn/g' | sed 's/繁体中文/zh-tw/g' | sed 's/english/en/g')"
          if [ "$RELEASE_TAG" = "latest" ]; then
            SOURCE_TAG=$(git ls-remote --tags https://github.com/modrinth/code.git | grep -E 'refs/tags/v[0-9]+' | sort -V | tail -1 | sed 's/.*refs\/tags\///')
            FINAL_TAG="${SOURCE_TAG}-zh-cn"
          fi
          
          echo "📦 Creating release with tag: $FINAL_TAG"
          
          # List all artifacts
          echo "📋 Available artifacts:"
          find build-artifacts/ -type f -name "*.exe" -o -name "*.dmg" -o -name "*.pkg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" | head -20
          
          # Create release notes
          cat > release_notes.md << EOF
          # Modrinth Auto-Translated Release
          
          🤖 **AI Translation**: Translated to $TARGET_LANGUAGE using OpenAI API
          🌍 **Multi-Platform**: Built for Linux, Windows, and macOS
          📅 **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          ## Platforms Included
          - 🐧 Linux (AppImage, .deb, .rpm)
          - 🪟 Windows (.exe, .msi)
          - 🍎 macOS (.dmg, .pkg) - Intel & Apple Silicon
          
          ## Installation
          1. Download the appropriate file for your platform
          2. Install/run the application
          3. Enjoy Modrinth in $TARGET_LANGUAGE!
          
          ---
          *This release was automatically generated by GitHub Actions*
          EOF
          
          # Create GitHub release
          gh release create "$FINAL_TAG" \
            --title "Modrinth $TARGET_LANGUAGE - $FINAL_TAG" \
            --notes-file release_notes.md \
            --draft \
            build-artifacts/*
            
          echo "✅ Release created successfully: $FINAL_TAG"