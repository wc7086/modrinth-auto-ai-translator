name: 'Auto Translate and Release'

on:
  workflow_dispatch:
    inputs:
      openai_model:
        description: 'OpenAI Model'
        required: true
        default: 'gpt-4o-mini'
        type: string
      api_endpoint:
        description: 'API Endpoint (optional, defaults to OpenAI official)'
        required: false
        default: 'https://api.openai.com/v1'
        type: string
      target_language:
        description: 'Target Language'
        required: true
        default: '简体中文'
        type: string
      release_tag:
        description: 'Release Tag (use "latest" for source repo latest tag, or specify custom tag)'
        required: false
        default: 'latest'
        type: string
      dry_run:
        description: 'Dry Run (analyze and translate only, no replacement/build)'
        required: false
        default: false
        type: boolean

jobs:
  translate:
    runs-on: ubuntu-latest
    outputs:
      translated: ${{ steps.check-translation.outputs.translated }}
      release-tag: ${{ steps.generate-tag.outputs.release-tag }}
    
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        
      - name: Restore translation cache
        uses: actions/cache@v4
        with:
          path: |
            translation-cache.json
          key: translation-cache-${{ inputs.openai_model }}-${{ inputs.target_language }}-${{ github.run_id }}
          restore-keys: |
            translation-cache-${{ inputs.openai_model }}-${{ inputs.target_language }}-
            translation-cache-${{ inputs.openai_model }}-
            translation-cache-
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
          
      - name: Verify package managers
        run: |
          echo "📋 Verifying package manager installations..."
          echo "Node version: $(node --version)"
          echo "npm version: $(npm --version)"
          echo "pnpm version: $(pnpm --version)"
          if command -v yarn &> /dev/null; then
            echo "yarn version: $(yarn --version)"
          else
            echo "ℹ️  yarn not available"
          fi
          
      - name: Clone source repository
        run: |
          echo "📥 Cloning Modrinth source repository..."
          git clone --recurse-submodules https://github.com/modrinth/code.git modrinth-source
          cd modrinth-source
          echo "✅ Repository cloned successfully"
          echo "📊 Repository statistics:"
          find . -type f -name "*.vue" -o -name "*.ts" -o -name "*.js" -o -name "*.tsx" -o -name "*.jsx" | wc -l | xargs echo "Total relevant files:"
          
      - name: Extract translatable text
        run: |
          echo "📝 Extracting translatable text from apps/app-frontend..."
          node scripts/extract-text.js modrinth-source/apps/app-frontend
          
      - name: Translate text with AI
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ inputs.openai_model }}
          API_ENDPOINT: ${{ inputs.api_endpoint }}
          TARGET_LANGUAGE: ${{ inputs.target_language }}
        run: |
          echo "🤖 Translating text with ${{ inputs.openai_model }}..."
          node scripts/translate-text.js
          
      - name: Save translation cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: |
            translation-cache.json
          key: translation-cache-${{ inputs.openai_model }}-${{ inputs.target_language }}-${{ github.run_id }}
          
      - name: Upload translation artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: translation-artifacts-${{ github.run_id }}
          path: |
            extracted-text.json
            translations.json
            translation-mapping.json
            translation-cache.json
          retention-days: 30
          
      - name: Replace text in source code
        if: ${{ !inputs.dry_run }}
        run: |
          echo "🔄 Replacing text in source code..."
          cp -r modrinth-source modrinth-source-backup
          node scripts/replace-text.js modrinth-source
          
      - name: Check translation completion
        id: check-translation
        run: |
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "translated=false" >> $GITHUB_OUTPUT
          else
            echo "translated=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Generate release tag
        id: generate-tag
        run: |
          FINAL_TAG="${{ inputs.release_tag }}-$(echo '${{ inputs.target_language }}' | tr '[:upper:]' '[:lower:]' | sed 's/简体中文/zh-cn/g' | sed 's/繁体中文/zh-tw/g' | sed 's/english/en/g')"
          if [ "${{ inputs.release_tag }}" = "latest" ]; then
            SOURCE_TAG=$(git ls-remote --tags https://github.com/modrinth/code.git | grep -E 'refs/tags/v[0-9]+' | sort -V | tail -1 | sed 's/.*refs\/tags\///')
            FINAL_TAG="${SOURCE_TAG}-zh-cn"
          fi
          echo "release-tag=$FINAL_TAG" >> $GITHUB_OUTPUT
          echo "🏷️ Release tag will be: $FINAL_TAG"
          
      - name: Upload translated source code
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-artifact@v4
        with:
          name: translated-source
          path: |
            modrinth-source/
            !modrinth-source/node_modules/
            !modrinth-source/.git/
            !modrinth-source/target/
          retention-days: 1
          
      - name: Generate summary report
        run: |
          echo "📋 Generating summary report..."
          echo "{\"simplified\": true, \"workflow\": \"simplified dependency installation\"}" > workflow-summary.json
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-reports-${{ github.run_id }}
          path: |
            replacement-report.json
            replacement-summary.md
            workflow-summary.json
          retention-days: 7

  build-platforms:
    needs: translate
    if: needs.translate.outputs.translated == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'linux'
            os: ubuntu-latest
            rust-targets: ''
            system-deps: 'sudo apt-get update && sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf'
            build-args: ''
          - platform: 'windows'
            os: windows-latest
            rust-targets: ''
            system-deps: ''
            build-args: ''
          - platform: 'macos-intel'
            os: macos-latest
            rust-targets: 'x86_64-apple-darwin'
            system-deps: ''
            build-args: '--target x86_64-apple-darwin'
          - platform: 'macos-arm'
            os: macos-latest
            rust-targets: 'aarch64-apple-darwin'
            system-deps: ''
            build-args: '--target aarch64-apple-darwin'
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Download translated source
        uses: actions/download-artifact@v4
        with:
          name: translated-source
          path: .
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-targets }}
        
      - name: Install system dependencies
        if: matrix.system-deps != ''
        run: ${{ matrix.system-deps }}
        
      - name: Install Node dependencies
        run: |
          cd modrinth-source/apps/app
          pnpm install
          
      - name: Build application
        run: |
          echo "🏗️ Building for ${{ matrix.platform }}..."
          cd modrinth-source/apps/app
          pnpm run tauri build ${{ matrix.build-args }}
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}
          path: |
            modrinth-source/apps/app/src-tauri/target/*/release/bundle/
            modrinth-source/apps/app/src-tauri/target/release/bundle/
          retention-days: 7
          if-no-files-found: warn

  create-release:
    needs: [translate, build-platforms]
    if: always() && needs.translate.outputs.translated == 'true' && (contains(needs.build-platforms.result, 'success'))
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          path: build-artifacts/
          merge-multiple: true
          
      - name: List artifacts
        run: |
          echo "📦 Available build artifacts:"
          find build-artifacts/ -type f \( -name "*.exe" -o -name "*.msi" -o -name "*.dmg" -o -name "*.pkg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" \) || echo "No standard installer files found"
          echo ""
          echo "📋 All files in build artifacts:"
          find build-artifacts/ -type f | head -20
          
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ needs.translate.outputs.release-tag }}
          TARGET_LANGUAGE: ${{ inputs.target_language }}
        run: |
          echo "🚀 Creating GitHub release..."
          
          # Create release notes
          cat > release_notes.md << EOF
          # Modrinth Auto-Translated Release
          
          🤖 **AI Translation**: Translated to $TARGET_LANGUAGE using ${{ inputs.openai_model }}
          🌍 **Multi-Platform**: Built for Linux, Windows, and macOS
          📅 **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          ## Platforms Included
          - 🐧 Linux (AppImage, .deb, .rpm)
          - 🪟 Windows (.exe, .msi)
          - 🍎 macOS (.dmg, .pkg) - Intel & Apple Silicon
          
          ## Installation
          1. Download the appropriate file for your platform
          2. Install/run the application
          3. Enjoy Modrinth in $TARGET_LANGUAGE!
          
          ---
          *This release was automatically generated by GitHub Actions*
          EOF
          
          # Create release
          gh release create "$RELEASE_TAG" \
            --title "Modrinth $TARGET_LANGUAGE - $RELEASE_TAG" \
            --notes-file release_notes.md \
            --draft \
            build-artifacts/* || echo "Release creation failed, but continuing..."
            
          echo "✅ Release process completed"