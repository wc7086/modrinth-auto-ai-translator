name: 'Auto Translate and Release'

on:
  workflow_dispatch:
    inputs:
      openai_model:
        description: 'OpenAI Model'
        required: true
        default: 'gpt-4o-mini'
        type: string
      api_endpoint:
        description: 'API Endpoint (optional, defaults to OpenAI official)'
        required: false
        default: 'https://api.openai.com/v1'
        type: string
      target_language:
        description: 'Target Language'
        required: true
        default: 'ÁÆÄ‰Ωì‰∏≠Êñá'
        type: string
      release_tag:
        description: 'Release Tag (use "latest" for source repo latest tag, or specify custom tag)'
        required: false
        default: 'latest'
        type: string
      dry_run:
        description: 'Dry Run (analyze and translate only, no replacement/build)'
        required: false
        default: false
        type: boolean

jobs:
  translate:
    runs-on: ubuntu-latest
    outputs:
      translated: ${{ steps.check-translation.outputs.translated }}
      release-tag: ${{ steps.generate-tag.outputs.release-tag }}
    
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        
      - name: Restore translation cache
        uses: actions/cache@v4
        with:
          path: |
            translation-cache.json
          key: translation-cache-${{ inputs.openai_model }}-${{ inputs.target_language }}-${{ github.run_id }}
          restore-keys: |
            translation-cache-${{ inputs.openai_model }}-${{ inputs.target_language }}-
            translation-cache-${{ inputs.openai_model }}-
            translation-cache-
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Clone source repository
        run: |
          echo "üì• Cloning Modrinth source repository..."
          git clone --recurse-submodules https://github.com/modrinth/code.git modrinth-source
          echo "‚úÖ Repository cloned successfully"
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          package_json_file: 'modrinth-source/package.json'
          run_install: false
          
      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
          
      - name: Extract translatable text
        run: |
          echo "üìù Extracting translatable text from apps/app-frontend..."
          node scripts/extract-text.js modrinth-source/apps/app-frontend
          
      - name: Translate text with AI
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ inputs.openai_model }}
          API_ENDPOINT: ${{ inputs.api_endpoint }}
          TARGET_LANGUAGE: ${{ inputs.target_language }}
        run: |
          echo "ü§ñ Translating text with ${{ inputs.openai_model }}..."
          node scripts/translate-text.js
          
      - name: Save translation cache
        uses: actions/cache/save@v4
        with:
          path: |
            translation-cache.json
          key: translation-cache-${{ inputs.openai_model }}-${{ inputs.target_language }}-${{ github.run_id }}
          
      - name: Upload translation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: translation-artifacts-${{ github.run_id }}
          path: |
            extracted-text.json
            translations.json
            translation-mapping.json
            translation-cache.json
          retention-days: 30
          
      - name: Replace text in source code
        if: ${{ !inputs.dry_run }}
        run: |
          echo "üîÑ Replacing text in source code..."
          cp -r modrinth-source modrinth-source-backup
          node scripts/replace-text.js modrinth-source
          
      - name: Check translation completion
        id: check-translation
        run: |
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "translated=false" >> $GITHUB_OUTPUT
          else
            echo "translated=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Generate release tag
        id: generate-tag
        run: |
          FINAL_TAG="${{ inputs.release_tag }}-$(echo '${{ inputs.target_language }}' | tr '[:upper:]' '[:lower:]' | sed 's/ÁÆÄ‰Ωì‰∏≠Êñá/zh-cn/g' | sed 's/ÁπÅ‰Ωì‰∏≠Êñá/zh-tw/g' | sed 's/english/en/g')"
          if [ "${{ inputs.release_tag }}" = "latest" ]; then
            SOURCE_TAG=$(git ls-remote --tags https://github.com/modrinth/code.git | grep -E 'refs/tags/v[0-9]+' | sort -V | tail -1 | sed 's/.*refs\/tags\///')
            FINAL_TAG="${SOURCE_TAG}-zh-cn"
          fi
          echo "release-tag=$FINAL_TAG" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Release tag will be: $FINAL_TAG"
          
      - name: Check SQLx cache files before upload
        if: ${{ !inputs.dry_run }}
        run: |
          echo "üîç Checking for SQLx cache files in translation phase..."
          echo "üìÅ Current directory: $(pwd)"
          echo "üìÅ Directory structure around app-lib:"
          find modrinth-source -name "app-lib" -type d
          find modrinth-source -name "packages" -type d
          echo "üóÇÔ∏è Looking for .sqlx directories:"
          find modrinth-source -name ".sqlx" -type d
          find modrinth-source -name "sqlx-data.json" -type f
          echo "üìÑ SQLx cache files:"
          find modrinth-source -path "*/.sqlx/*" -type f | head -10
          
      - name: Upload translated source code
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-artifact@v4
        with:
          name: translated-source
          path: |
            modrinth-source
          retention-days: 1
          

  build-platforms:
    needs: translate
    if: needs.translate.outputs.translated == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'linux'
            os: ubuntu-latest
            system-deps: 'sudo apt-get update && sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf'
          - platform: 'windows'
            os: windows-latest
            system-deps: ''
          - platform: 'macos'
            os: macos-latest
            system-deps: ''
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Download translated source
        uses: actions/download-artifact@v4
        with:
          name: translated-source
          path: .
          
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
          
      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Setup Rust cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
        
      - name: Install system dependencies
        if: matrix.system-deps != ''
        run: ${{ matrix.system-deps }}
        
      - name: Simple directory search (All platforms)
        id: find-app-dir-simple
        shell: bash
        run: |
          echo "üîç Simple directory search..."
          
          # Find any directory that contains package.json with Tauri dependencies
          FOUND_DIR=""
          
          # Search for package.json files and check for Tauri
          while IFS= read -r -d '' pkg_file; do
            echo "üìÑ Checking: $pkg_file"
            dir=$(dirname "$pkg_file")
            
            # Check if this package.json contains Tauri dependencies or scripts
            if grep -q "@tauri-apps\|tauri.*build" "$pkg_file" 2>/dev/null; then
              echo "‚úÖ Found Tauri project in: $dir"
              # Also check if there's a src-tauri directory
              if [ -d "$dir/src-tauri" ]; then
                echo "‚úÖ Confirmed: src-tauri directory exists"
                FOUND_DIR="$dir"
                break
              else
                echo "‚ö†Ô∏è  Has Tauri dependencies but no src-tauri directory"
              fi
            fi
          done < <(find . -name "package.json" -type f -print0)
          
          # If no Tauri found, look for any app-like directory with package.json
          if [ -z "$FOUND_DIR" ]; then
            echo "‚ö†Ô∏è  No Tauri project found, looking for app directories..."
            
            # Check common app directory patterns
            for pattern in "*/apps/*" "*/app" "apps/*" "app" "*frontend*" "frontend"; do
              for dir in $pattern; do
                if [ -d "$dir" ] && [ -f "$dir/package.json" ]; then
                  echo "‚úÖ Found app directory: $dir"
                  FOUND_DIR="$dir"
                  break 2
                fi
              done
            done
          fi
          
          if [ -z "$FOUND_DIR" ]; then
            echo "‚ùå Could not find any suitable app directory"
            echo "üìÅ All directories:"
            find . -type d | head -20
            echo "üìÑ All package.json files:"
            find . -name "package.json" -type f
            exit 1
          fi
          
          echo "app-dir=$FOUND_DIR" >> $GITHUB_OUTPUT
          echo "‚úÖ Selected app directory: $FOUND_DIR"
          
          
      - name: Check directory structure after download
        shell: bash
        run: |
          echo "üîç Checking directory structure in build phase..."
          echo "üìÅ Current directory: $(pwd)"
          echo "üìÅ Top-level contents:"
          ls -la
          echo "üìÅ Looking for modrinth-source directory:"
          find . -name "modrinth-source" -type d
          echo "üìÅ Looking for packages directory:"
          find . -name "packages" -type d
          echo "üìÅ Looking for app-lib directory:"
          find . -name "app-lib" -type d
          echo "üóÇÔ∏è Looking for .sqlx directories:"
          find . -name ".sqlx" -type d
          echo "üìÑ SQLx cache files:"
          find . -path "*/.sqlx/*" -type f | head -10
          
          # Check if .gitignore might be excluding .sqlx files
          if [ -f ".gitignore" ]; then
            echo "üìÑ .gitignore content related to sqlx:"
            grep -i sqlx .gitignore || echo "No sqlx entries in .gitignore"
          fi
          
          echo "üîß Checking workspace structure for app-lib dependency:"
          if [ -f "Cargo.toml" ]; then
            echo "üìÑ Root Cargo.toml workspace members:"
            grep -A 10 "members" Cargo.toml || echo "No workspace members found"
          fi
          
          echo "üìÅ Expected SQLx cache path from app directory:"
          EXPECTED_APP_DIR=$(find . -path "*/apps/app" -type d | head -1)
          if [ -n "$EXPECTED_APP_DIR" ]; then
            echo "App directory: $EXPECTED_APP_DIR"
            echo "Expected app-lib path: $(dirname $(dirname $EXPECTED_APP_DIR))/packages/app-lib"
            EXPECTED_SQLX_PATH="$(dirname $(dirname $EXPECTED_APP_DIR))/packages/app-lib/.sqlx"
            echo "Expected SQLx path: $EXPECTED_SQLX_PATH"
            if [ -d "$EXPECTED_SQLX_PATH" ]; then
              echo "‚úÖ SQLx cache found at expected location"
              ls -la "$EXPECTED_SQLX_PATH" | head -5
            else
              echo "‚ùå SQLx cache not found at expected location"
            fi
          fi
          
      - name: Install Node dependencies
        shell: bash
        run: |
          cd "${{ steps.find-app-dir-simple.outputs.app-dir }}"
          pnpm install
          
          
          
          
          
      - name: Build application
        shell: bash
        run: |
          echo "üèóÔ∏è Building for ${{ matrix.platform }}..."
          cd "${{ steps.find-app-dir-simple.outputs.app-dir }}"
          
          echo "üöÄ Running: pnpm build"
          pnpm build
          
      - name: Check build results
        shell: bash
        run: |
          cd "${{ steps.find-app-dir-simple.outputs.app-dir }}"
          echo "üì¶ Checking for build artifacts..."
          echo "üîç Current directory: $(pwd)"
          
          # Look for various possible target locations
          echo "üîç Looking for target directories..."
          find . -name "target" -type d | head -10
          
          echo "üîç Looking for build outputs..."
          ARTIFACTS=$(find . -name "*.app" -o -name "*.dmg" -o -name "*.exe" -o -name "*.deb" -o -name "*.AppImage" -o -name "*.msi" -o -name "*.rpm" | head -10)
          
          if [ -n "$ARTIFACTS" ]; then
            echo "‚úÖ Found build artifacts:"
            echo "$ARTIFACTS"
          else
            echo "‚ùå No build artifacts found"
            exit 1
          fi
          
          echo "üîç Looking for bundle directories..."
          find . -name "bundle" -type d | head -10
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}
          path: |
            ${{ steps.find-app-dir-simple.outputs.app-dir }}/src-tauri/target/*/release/bundle/**/*
            ${{ steps.find-app-dir-simple.outputs.app-dir }}/src-tauri/target/release/bundle/**/*
            ${{ steps.find-app-dir-simple.outputs.app-dir }}/target/*/release/bundle/**/*
            ${{ steps.find-app-dir-simple.outputs.app-dir }}/target/release/bundle/**/*
            ${{ steps.find-app-dir-simple.outputs.app-dir }}/**/*.app
            ${{ steps.find-app-dir-simple.outputs.app-dir }}/**/*.dmg
            ${{ steps.find-app-dir-simple.outputs.app-dir }}/**/*.exe
            ${{ steps.find-app-dir-simple.outputs.app-dir }}/**/*.msi
            ${{ steps.find-app-dir-simple.outputs.app-dir }}/**/*.deb
            ${{ steps.find-app-dir-simple.outputs.app-dir }}/**/*.rpm
            ${{ steps.find-app-dir-simple.outputs.app-dir }}/**/*.AppImage
          retention-days: 7
          if-no-files-found: error

  create-release:
    needs: [translate, build-platforms]
    if: needs.translate.outputs.translated == 'true' && needs.build-platforms.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          path: build-artifacts/
          merge-multiple: true
          
      - name: List artifacts
        run: |
          echo "üì¶ Available build artifacts:"
          find build-artifacts/ -type f \( -name "*.exe" -o -name "*.msi" -o -name "*.dmg" -o -name "*.pkg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" \) || echo "No standard installer files found"
          echo ""
          echo "üìã All files in build artifacts:"
          find build-artifacts/ -type f | head -20
          
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ needs.translate.outputs.release-tag }}
          TARGET_LANGUAGE: ${{ inputs.target_language }}
        run: |
          echo "üöÄ Creating GitHub release..."
          
          # Create release notes
          cat > release_notes.md << EOF
          # Modrinth Auto-Translated Release
          
          ü§ñ **AI Translation**: Translated to $TARGET_LANGUAGE using ${{ inputs.openai_model }}
          üåç **Multi-Platform**: Built for Linux, Windows, and macOS
          üìÖ **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          ## Platforms Included
          - üêß Linux (AppImage, .deb, .rpm)
          - ü™ü Windows (.exe, .msi)
          - üçé macOS (.dmg, .pkg) - Intel & Apple Silicon
          
          ## Installation
          1. Download the appropriate file for your platform
          2. Install/run the application
          3. Enjoy Modrinth in $TARGET_LANGUAGE!
          
          ---
          *This release was automatically generated by GitHub Actions*
          EOF
          
          # Create release
          gh release create "$RELEASE_TAG" \
            --title "Modrinth $TARGET_LANGUAGE - $RELEASE_TAG" \
            --notes-file release_notes.md \
            --draft \
            build-artifacts/* || echo "Release creation failed, but continuing..."
            
          echo "‚úÖ Release process completed"