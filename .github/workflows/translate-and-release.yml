name: 'Auto Translate and Release'

on:
  workflow_dispatch:
    inputs:
      openai_model:
        description: 'OpenAI Model'
        required: true
        default: 'gpt-4o-mini'
        type: string
      api_endpoint:
        description: 'API Endpoint (optional, defaults to OpenAI official)'
        required: false
        default: 'https://api.openai.com/v1'
        type: string
      target_language:
        description: 'Target Language'
        required: true
        default: '简体中文'
        type: string
      release_tag:
        description: 'Release Tag (use "latest" for source repo latest tag, or specify custom tag)'
        required: false
        default: 'latest'
        type: string
      dry_run:
        description: 'Dry Run (analyze and translate only, no replacement/build)'
        required: false
        default: false
        type: boolean

jobs:
  translate:
    runs-on: ubuntu-latest
    outputs:
      translated: ${{ steps.check-translation.outputs.translated }}
      release-tag: ${{ steps.generate-tag.outputs.release-tag }}
    
    steps:
      - name: Checkout Modrinth source repository
        uses: actions/checkout@v4
        with:
          repository: modrinth/code
          path: .
          submodules: recursive
        
      - name: Checkout translation scripts
        uses: actions/checkout@v4
        with:
          path: translator-scripts
          
      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          package_json_file: 'package.json'
          run_install: false
          
      - name: Setup caches
        uses: actions/cache@v4
        with:
          path: |
            translation-cache.json
            ~/.local/share/pnpm
          key: translation-cache-${{ inputs.openai_model }}-${{ inputs.target_language }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            translation-cache-${{ inputs.openai_model }}-${{ inputs.target_language }}-
            translation-cache-${{ inputs.openai_model }}-
            translation-cache-
          
      - name: Extract and translate text
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ inputs.openai_model }}
          API_ENDPOINT: ${{ inputs.api_endpoint }}
          TARGET_LANGUAGE: ${{ inputs.target_language }}
        run: |
          echo "📝 Processing translation..."
          cp translator-scripts/scripts/*.js .
          node extract-text.js apps/app-frontend
          node translate-text.js
          
      - name: Replace text and prepare release
        if: ${{ !inputs.dry_run }}
        run: |
          echo "🔄 Replacing text in source code..."
          node replace-text.js .
          
      - name: Check translation completion
        id: check-translation
        run: |
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "translated=false" >> $GITHUB_OUTPUT
          else
            echo "translated=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Generate release tag
        id: generate-tag
        run: |
          echo "🏷️ Generating release tag..."
          FINAL_TAG="${{ inputs.release_tag }}-$(echo '${{ inputs.target_language }}' | tr '[:upper:]' '[:lower:]' | sed 's/简体中文/zh-cn/g' | sed 's/繁体中文/zh-tw/g' | sed 's/english/en/g')"
          if [ "${{ inputs.release_tag }}" = "latest" ]; then
            SOURCE_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.9.5")
            FINAL_TAG="${SOURCE_TAG}-zh-cn"
          fi
          echo "release-tag=$FINAL_TAG" >> $GITHUB_OUTPUT
          echo "🏷️ Release tag: $FINAL_TAG"
          
      - name: Upload artifacts and source
        if: ${{ !inputs.dry_run }}
        run: |
          echo "📦 Creating source archive..."
          tar -czf translated-source.tar.gz \
            --exclude='.git' \
            --exclude='translator-scripts' \
            --exclude='translated-source.tar.gz' \
            --warning=no-file-changed \
            --warning=no-file-removed \
            . || [ $? -eq 1 ]
            
      - name: Upload translation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: translation-artifacts-${{ github.run_id }}
          path: |
            extracted-text.json
            translations.json
            translation-mapping.json
            translation-cache.json
          retention-days: 30
          
      - name: Upload translated source code
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-artifact@v4
        with:
          name: translated-source
          path: translated-source.tar.gz
          retention-days: 1

  build-platforms:
    needs: translate
    if: needs.translate.outputs.translated == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'linux'
            os: ubuntu-latest
            system-deps: 'sudo apt-get update && sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf'
          - platform: 'windows'
            os: windows-latest
            system-deps: ''
          - platform: 'macos'
            os: macos-latest
            system-deps: ''
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Download translated source
        uses: actions/download-artifact@v4
        with:
          name: translated-source
          path: ./download
          
      - name: Install tar on Windows
        if: runner.os == 'Windows'
        run: |
          echo "📦 Installing tar on Windows..."
          choco install gnuwin32-coreutils.install -y
          
      - name: Extract translated source
        shell: bash
        run: |
          echo "📦 Extracting source archive..."
          cd download && tar -xzf translated-source.tar.gz -C .. && cd .. && rm -rf download
          
      - name: Setup build environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          package_json_file: 'package.json'
          run_install: false
          
      - name: Setup caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/pnpm
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-build-${{ hashFiles('**/pnpm-lock.yaml', '**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install system dependencies
        if: matrix.system-deps != ''
        run: ${{ matrix.system-deps }}
        
      - name: Find and build application
        shell: bash
        run: |
          echo "🔍 Finding Tauri application directory..."
          
          # Look for directory with both package.json containing @tauri-apps AND src-tauri directory
          APP_DIR=""
          for pkg_file in $(find . -name "package.json" -type f); do
            dir=$(dirname "$pkg_file")
            if grep -q "@tauri-apps" "$pkg_file" 2>/dev/null && [ -d "$dir/src-tauri" ]; then
              APP_DIR="$dir"
              echo "✅ Found Tauri app with src-tauri: $APP_DIR"
              break
            fi
          done
          
          # Fallback: look for common Tauri app directory names
          if [ -z "$APP_DIR" ]; then
            for candidate in "./apps/app" "./app" "./apps/desktop" "./desktop"; do
              if [ -d "$candidate" ] && [ -f "$candidate/package.json" ] && [ -d "$candidate/src-tauri" ]; then
                APP_DIR="$candidate"
                echo "✅ Found Tauri app by directory name: $APP_DIR"
                break
              fi
            done
          fi
          
          if [ -z "$APP_DIR" ]; then
            echo "❌ Could not find Tauri application directory"
            echo "📁 Available directories with package.json:"
            find . -name "package.json" -type f | head -10
            exit 1
          fi
          
          echo "✅ Using app directory: $APP_DIR"
          
          echo "📦 Installing dependencies..."
          cd "$APP_DIR" && pnpm install
          
          echo "🏗️ Building for ${{ matrix.platform }}..."
          echo "📋 Available scripts:"
          cat package.json | grep -A 10 '"scripts"' || true
          echo "🔧 Checking for Tauri configuration..."
          ls -la src-tauri/ 2>/dev/null || echo "No src-tauri directory found"
          
          # Try different build commands
          if [ -f "package.json" ] && grep -q "tauri.*build" package.json; then
            echo "🚀 Running: pnpm tauri build"
            pnpm tauri build
          elif [ -f "package.json" ] && grep -q '"build".*"tauri"' package.json; then
            echo "🚀 Running: pnpm build"
            pnpm build
          else
            echo "🚀 Running: pnpm build (fallback)"
            pnpm build
          fi
          
          echo "📦 Checking build results..."
          echo "🔍 Looking for Tauri bundle directory..."
          find . -name "bundle" -type d | head -5
          echo "🔍 Looking for any build artifacts..."
          find . \( -name "*.app" -o -name "*.dmg" -o -name "*.exe" -o -name "*.deb" -o -name "*.AppImage" -o -name "*.msi" -o -name "*.rpm" \) -print | head -10
          
          # Check for bundle directory with artifacts
          BUNDLE_DIRS=$(find . -name "bundle" -type d)
          if [ -n "$BUNDLE_DIRS" ]; then
            echo "✅ Build completed - Found bundle directories:"
            echo "$BUNDLE_DIRS"
            for dir in $BUNDLE_DIRS; do
              echo "📁 Contents of $dir:"
              ls -la "$dir"/ 2>/dev/null || true
            done
          elif [ -d "src-tauri/target" ] || [ -d "target" ]; then
            echo "✅ Build completed - Tauri target directory found"
          else
            echo "❌ No Tauri build output found"
            exit 1
          fi
          
          echo "app-dir=$APP_DIR" >> $GITHUB_ENV
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}
          path: |
            ${{ env.app-dir }}/src-tauri/target/*/release/bundle/**/*
            ${{ env.app-dir }}/src-tauri/target/release/bundle/**/*
            ${{ env.app-dir }}/target/*/release/bundle/**/*
            ${{ env.app-dir }}/target/release/bundle/**/*
            ${{ env.app-dir }}/**/*.app
            ${{ env.app-dir }}/**/*.dmg
            ${{ env.app-dir }}/**/*.exe
            ${{ env.app-dir }}/**/*.msi
            ${{ env.app-dir }}/**/*.deb
            ${{ env.app-dir }}/**/*.rpm
            ${{ env.app-dir }}/**/*.AppImage
          retention-days: 7
          if-no-files-found: error

  create-release:
    needs: [translate, build-platforms]
    if: needs.translate.outputs.translated == 'true' && needs.build-platforms.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          path: build-artifacts/
          merge-multiple: true
          
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ needs.translate.outputs.release-tag }}
          TARGET_LANGUAGE: ${{ inputs.target_language }}
        run: |
          echo "🚀 Creating GitHub release..."
          
          cat > release_notes.md << EOF
          # Modrinth Auto-Translated Release
          
          🤖 **AI Translation**: Translated to $TARGET_LANGUAGE using ${{ inputs.openai_model }}
          🌍 **Multi-Platform**: Built for Linux, Windows, and macOS
          📅 **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          ## Platforms Included
          - 🐧 Linux (AppImage, .deb, .rpm)
          - 🪟 Windows (.exe, .msi)
          - 🍎 macOS (.dmg) - Intel & Apple Silicon
          
          ## Installation
          1. Download the appropriate file for your platform
          2. Install/run the application
          3. Enjoy Modrinth in $TARGET_LANGUAGE!
          
          ---
          *This release was automatically generated by GitHub Actions*
          EOF
          
          gh release create "$RELEASE_TAG" \
            --title "Modrinth $TARGET_LANGUAGE - $RELEASE_TAG" \
            --notes-file release_notes.md \
            --draft \
            build-artifacts/* || echo "Release creation failed, but continuing..."
            
          echo "✅ Release process completed"